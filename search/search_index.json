{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Path Planning using Convex Lifting About The purpose of this toolbox is to find a path in an environnment with obstacles, in any number of dimensions, using the Convex Lifting method. This toolbox requires MPT and tbxmanager . Usage documentation is available here In Matlab Building Documentation This documentation is built with mkdocs , the following python packages are required: mkdocs pymdown-extensions pygments run mkdocs build to build html documentation in site/ and mkdocs serve to build and serve on localhost Modules lift Functions related to calculating and maipulating a convex lifting util Internal utility functions testing Functions for testing this library project Functions to convert a lifting generated by the lift into a graph that can be navigated graph Functions to operate and pathfind on the generated graphs Functions","title":"Path Planning using Convex Lifting"},{"location":"#path-planning-using-convex-lifting","text":"","title":"Path Planning using Convex Lifting"},{"location":"#about","text":"The purpose of this toolbox is to find a path in an environnment with obstacles, in any number of dimensions, using the Convex Lifting method. This toolbox requires MPT and tbxmanager .","title":"About"},{"location":"#usage","text":"documentation is available here","title":"Usage"},{"location":"#in-matlab","text":"","title":"In Matlab"},{"location":"#building","text":"","title":"Building"},{"location":"#documentation","text":"This documentation is built with mkdocs , the following python packages are required: mkdocs pymdown-extensions pygments run mkdocs build to build html documentation in site/ and mkdocs serve to build and serve on localhost","title":"Documentation"},{"location":"#modules","text":"","title":"Modules"},{"location":"#lift","text":"Functions related to calculating and maipulating a convex lifting","title":" lift "},{"location":"#util","text":"Internal utility functions","title":" util "},{"location":"#testing","text":"Functions for testing this library","title":" testing "},{"location":"#project","text":"Functions to convert a lifting generated by the lift into a graph that can be navigated","title":" project "},{"location":"#graph","text":"Functions to operate and pathfind on the generated graphs","title":" graph "},{"location":"#functions","text":"","title":"Functions"},{"location":"graph/","text":"module graph Functions for testing this library. function Causes an error if size(x) is different from shape . *","title":"<span class=\"code\"> <span class=\"mod\">module</span> graph </span>"},{"location":"graph/#module-graph","text":"Functions for testing this library.","title":" module graph "},{"location":"graph/#function","text":"Causes an error if size(x) is different from shape . *","title":" function "},{"location":"lift/","text":"module lift This modules contains functions to create and operate on a convex lifting function find Find a convex lifting over a set of obstacles, Usage [oa, ob] = lift.find(obstacles) Parameters obstacles An array of Polyhedron of length N . All the elements must be of the same dimension D Return Values The returned values define the found convex lifting, they are such that the lifting function is defined by z(x) = max(oa * x + ob) . oa A matrix with N lines and ' D columns ob A column vector with N lines function max Find the maximum of the convex lifting function in a given space, used internally when tracing the lifting function to place the obstacles above it. Usage max_value = lift.max(oa, ob, space) Parameters oa and ob The values returned by lift.find space Where to look for the maximum, currently a scalar representing the radius of a hypercube Return Values max_value The maximum of the convex lifting","title":"<span class=\"code\"> <span class=\"mod\">module</span> lift </span>"},{"location":"lift/#module-lift","text":"This modules contains functions to create and operate on a convex lifting","title":" module lift "},{"location":"lift/#function-find","text":"Find a convex lifting over a set of obstacles, Usage [oa, ob] = lift.find(obstacles) Parameters obstacles An array of Polyhedron of length N . All the elements must be of the same dimension D Return Values The returned values define the found convex lifting, they are such that the lifting function is defined by z(x) = max(oa * x + ob) . oa A matrix with N lines and ' D columns ob A column vector with N lines","title":" function find "},{"location":"lift/#function-max","text":"Find the maximum of the convex lifting function in a given space, used internally when tracing the lifting function to place the obstacles above it. Usage max_value = lift.max(oa, ob, space) Parameters oa and ob The values returned by lift.find space Where to look for the maximum, currently a scalar representing the radius of a hypercube Return Values max_value The maximum of the convex lifting","title":" function max "},{"location":"project/","text":"module project Functions for testing this library. function Causes an error if size(x) is different from shape . *","title":"<span class=\"code\"> <span class=\"mod\">module</span> project </span>"},{"location":"project/#module-project","text":"Functions for testing this library.","title":" module project "},{"location":"project/#function","text":"Causes an error if size(x) is different from shape . *","title":" function "},{"location":"testing/","text":"module testing Functions for testing this library. function Causes an error if size(x) is different from shape . *","title":"<span class=\"code\"> <span class=\"mod\">module</span> testing </span>"},{"location":"testing/#module-testing","text":"Functions for testing this library.","title":" module testing "},{"location":"testing/#function","text":"Causes an error if size(x) is different from shape . *","title":" function "},{"location":"util/","text":"module util This modules contains internal functions that are not meant to be used by the end user. function assert_shape Causes an error if size(x) is different from shape . Usage util.assert_shape(x, shape) function barycenter Usage center = util.barycenter( poly ) Parameters poly Any bounded, non empty Polyhedron of dimension D Return Values center A D dimensional row vector representing the barycenter of poly function box Returns a hypercube of a given radius, potentially stretch vertically Usage poly = util.box(center, radius) poly = util.box(center, radius, z_size) Parameters Calculates the barycenter of a polyhedron : the average of all its vertices. center A row vector of dimension D radius A Scalar, he distance in each dimension from center to the edge of the cube z_size If given, overrides radius for the last dimension Return Values poly A D dimensional hypercube, stretched if z_size is different from radius function is_near_unit Tests wether a vector is nearly colinear to any of the unit vectors of the canonical basis. The exact formula used is N(v/N(v) - u) <= epsilon where v is the tested vector, u the unit vector and N is the euclidian norm. Usage test = util.is_near_unit(vector) test = util.is_near_unit(vector, epsilon) Parameters vector Any row vector epsilon The error margin, defaults to 0.001 function matrix_equals Tests wether two matrixes are equal within a given margin of error test = util.matrix_equals(A, B) test = util.matrix_equals(A, B, epsilon) Parameters A and B Two matrices to test epsilon The margin of error, defaults to 0.001 function read_obj Reads a set of polyhedra from a .obj (blender) file. Usage poly = util.read_obj(file) poly = util.read_obj(file, useHRep) Parameters file The name of a file to load polyhedra from, relative to the cwd useHrep If true , the polyhedra are returned in hrep, defaults to false Return Values poly A column vector of Polyhedron objects function reduction Scales a polyhedron by some factor around its barycenter. Usage scaled = util.reduction( poly , factor ) Parameters poly Any Polyhedron factor A scalar to scale poly by Return Values scaled A new Polyhedron function unit_vec Creates nth n -th unit vector of the canonical base in dimension dim . Usage u = util.unit_vec(dim, n) Parameters dim The dimension of the output vector n An integer in 1:dim Return value u A dim dimensional unit row vector, its only non zero component is th n -th","title":"<span class=\"code\"> <span class=\"mod\">module</span> util </span>"},{"location":"util/#module-util","text":"This modules contains internal functions that are not meant to be used by the end user.","title":" module util "},{"location":"util/#function-assert_shape","text":"Causes an error if size(x) is different from shape . Usage util.assert_shape(x, shape)","title":" function assert_shape "},{"location":"util/#function-barycenter","text":"Usage center = util.barycenter( poly ) Parameters poly Any bounded, non empty Polyhedron of dimension D Return Values center A D dimensional row vector representing the barycenter of poly","title":" function barycenter "},{"location":"util/#function-box","text":"Returns a hypercube of a given radius, potentially stretch vertically Usage poly = util.box(center, radius) poly = util.box(center, radius, z_size) Parameters Calculates the barycenter of a polyhedron : the average of all its vertices. center A row vector of dimension D radius A Scalar, he distance in each dimension from center to the edge of the cube z_size If given, overrides radius for the last dimension Return Values poly A D dimensional hypercube, stretched if z_size is different from radius","title":" function box "},{"location":"util/#function-is_near_unit","text":"Tests wether a vector is nearly colinear to any of the unit vectors of the canonical basis. The exact formula used is N(v/N(v) - u) <= epsilon where v is the tested vector, u the unit vector and N is the euclidian norm. Usage test = util.is_near_unit(vector) test = util.is_near_unit(vector, epsilon) Parameters vector Any row vector epsilon The error margin, defaults to 0.001","title":" function is_near_unit "},{"location":"util/#function-matrix_equals","text":"Tests wether two matrixes are equal within a given margin of error test = util.matrix_equals(A, B) test = util.matrix_equals(A, B, epsilon) Parameters A and B Two matrices to test epsilon The margin of error, defaults to 0.001","title":" function matrix_equals "},{"location":"util/#function-read_obj","text":"Reads a set of polyhedra from a .obj (blender) file. Usage poly = util.read_obj(file) poly = util.read_obj(file, useHRep) Parameters file The name of a file to load polyhedra from, relative to the cwd useHrep If true , the polyhedra are returned in hrep, defaults to false Return Values poly A column vector of Polyhedron objects","title":" function read_obj "},{"location":"util/#function-reduction","text":"Scales a polyhedron by some factor around its barycenter. Usage scaled = util.reduction( poly , factor ) Parameters poly Any Polyhedron factor A scalar to scale poly by Return Values scaled A new Polyhedron","title":" function reduction "},{"location":"util/#function-unit_vec","text":"Creates nth n -th unit vector of the canonical base in dimension dim . Usage u = util.unit_vec(dim, n) Parameters dim The dimension of the output vector n An integer in 1:dim Return value u A dim dimensional unit row vector, its only non zero component is th n -th","title":" function unit_vec "}]}